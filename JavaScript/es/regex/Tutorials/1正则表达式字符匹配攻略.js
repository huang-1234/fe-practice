

{
  /* 正则表达式之所以强大，是因为其能实现模糊匹配。而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。
  1.1 横向模糊匹配
  横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。其实现的方式是使用量词。譬如{m,n}，
  表示连续出现最少m次，最多n次。比如/ab{2,5}c/表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，
  最后是字符“c”。测试如下：

  注意：案例中用的正则是/ab{2,5}c/g，后面多了g，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到
  满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。g是单词global的首字母。*/
  var regex = /ab{2,5}c/g;
  var string = "abc abbc abbbc abbbbc abbbbbc abbbbbbc";
  console.log( string.match(regex) );
  // => ["abbc", "abbbc", "abbbbc", "abbbbbc"]

}

{
  /* 1.2 纵向模糊匹配纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。
  其实现的方式是使用字符组。譬如[abc]，表示该字符是可以字符“a”、“b”、“c”中的任何一个。比如/a[123]b/可以匹配如下
  三种字符串："a1b"、"a2b"、"a3b"。测试如下：
 */
  var regex = /a[123]b/g;
  var string = "a0b a1b a2b a3b a4b a12b";
  console.log( string.match(regex) );
  // => ["a1b", "a2b", "a3b"]

}

{
  /* 2.3 常见的简写形式有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。
  \d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。
  \D就是[^0-9]。表示除数字外的任意字符。
  \w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。
  \W是[^0-9a-zA-Z_]。非单词字符。
  \s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：
  s是space character的首字母。
  \S是[^ \t\v\n\r\f]。 非空白符。.就是[^\n\r\u2028\u2029]。通配符，表示几乎任意字符。
  换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号...中的每个点，都可以理解成占位符，表示任何类似的东西。
  如果要匹配任意字符怎么办？可以使用[\d\D]、[\w\W]、[\s\S]和[^]中任何的一个。 */
}

// 3. 量词
// 量词也称重复。掌握{m,n}的准确含义后，只需要记住一些简写形式。
{
  /* 3.1 简写形式{m,} 表示至少出现m次。{m} 等价于{m,m}，表示出现m次。? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？+ 等价于{1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。* 等价于{0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。 */
}