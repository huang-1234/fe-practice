{"version":3,"file":"src_pages_materials_index_tsx.bundle.js","mappings":"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","sources":["webpack://webpack-zero/./src/global/materials/steps/index.ts","webpack://webpack-zero/./src/global/materials/steps/level/demos/index.tsx","webpack://webpack-zero/./src/global/materials/steps/level/index.tsx","webpack://webpack-zero/./src/global/materials/steps/level/level-step/LevelStepWrap.tsx","webpack://webpack-zero/./src/global/materials/steps/level/level-step/LvScale.tsx","webpack://webpack-zero/./src/global/materials/steps/level/level-step/index.tsx","webpack://webpack-zero/./src/global/materials/steps/level/level-step/utils.ts","webpack://webpack-zero/./src/global/materials/steps/level/mock.ts","webpack://webpack-zero/./src/pages/materials/index.tsx"],"sourcesContent":["import { LevelStepDemo } from \"./level/demos\";\n\nexport {\n  LevelStepDemo\n}","import React, { useCallback, useState } from 'react';\n\nimport { Button, Slider } from 'antd';\nimport { INode, TLvBtnProps, useLevelStepWrap } from '../index';\n\nimport { _configs, _current } from '../mock';\n\nimport '../index.scss';\n\nconst ActiveArrow = (\n  <div style={{ height: 20, backgroundColor: 'red', display: 'flex', justifyContent: 'center' }}>自定义</div>\n);\n\nexport const LevelStepDemo = () => {\n  const [lvBtn, setLvBtn] = useState<TLvBtnProps>(false);\n  const [lvBtnArrow, setLvBtnArrow] = useState(false);\n  const [lvConfigs, lvCurrentShow] = [_configs as INode[], _current as INode];\n  const [lvCurOne, setLvCurOne] = useState(lvCurrentShow);\n\n  // console.log('lvBtnArrow', lvBtnArrow);\n\n  const onActive = useCallback((actNode: INode, idx: number) => {\n    // console.log('scaleLv - index', idx, actNode);\n  }, []);\n\n  const onActiveLvLabel = useCallback((actNode: INode, idx: number) => {\n    // console.log('scaleLv - index', idx, actNode);\n  }, []);\n\n  const lvBtnProps = {\n    ActiveArrow,\n  };\n  const { levelStepNode: totalNode, onLabelActionReset: totalReset } = useLevelStepWrap({\n    onActive,\n    steps: lvConfigs,\n    current: lvCurOne,\n    lvBtnProps,\n    currentLv: 2,\n  });\n  const { levelStepNode: onlyProcessNode, onLabelActionReset: onlyProcessReset } = useLevelStepWrap({\n    onActive: onActiveLvLabel,\n    steps: lvConfigs,\n    current: lvCurrentShow,\n    currentLv: 3,\n    lvBtnProps: lvBtn,\n  });\n\n  const onBtnArrowChange = () => {\n    lvBtnArrow ? setLvBtnArrow(false) : setLvBtnArrow(true);\n    setLvBtn({ ActiveArrow: lvBtnArrow ? false : true });\n  };\n\n  const stepLen = 10;\n\n  function getMinMax() {\n    if (lvConfigs?.length) {\n      return {\n        min: lvConfigs?.[0]?.value,\n        max: lvConfigs?.[lvConfigs.length - 1]?.value,\n      };\n    } else {\n      return {\n        min: 0,\n        max: 100,\n      };\n    }\n  }\n  const onSliderChange = (value: number) => {\n    setLvCurOne({\n      ...lvCurOne,\n      value,\n    });\n  };\n  return (\n    <>\n      <div className={`lv_5`}>\n        <h2>使用一个完整的 LevelStepWrap 组件: 默认等级3级，索引currentLv为2</h2>\n        <div className=\"ctrl_slider\">\n          <span>等级值改变slider</span>\n          <Slider\n            min={getMinMax().min}\n            max={getMinMax().max}\n            step={stepLen}\n            defaultValue={lvCurOne?.value}\n            onChange={onSliderChange}\n          />\n          <Button onClick={totalReset}>btn reset</Button>\n        </div>\n        {totalNode}\n      </div>\n      <div className={`lv_5`}>\n        <h2>去掉 等级刻度和等级按钮 只展示等级进度条: 默认等级4级，索引currentLv为3</h2>\n        <div>\n          <Button onClick={onlyProcessReset}>btn reset</Button>\n          <Button\n            onClick={() => {\n              lvBtn ? setLvBtn(false) : setLvBtn({ ActiveArrow: lvBtnArrow });\n            }}>\n            {lvBtn ? 'hide lvBtn' : 'show lvBtn'}\n          </Button>\n          <Button\n            disabled={!lvBtn}\n            onClick={() => {\n              onBtnArrowChange();\n            }}>\n            {lvBtnArrow ? 'hide lvBtnArrow' : 'show lvBtnArrow'}\n          </Button>\n        </div>\n        {onlyProcessNode}\n      </div>\n    </>\n  );\n};\n\nexport default () => {\n  return <LevelStepDemo />;\n};\n","export {\n  _nodePar,\n  getLvIdxByCurScore,\n  ILevelStepWrap,\n  ILvLabelAction,\n  INode,\n  LevelStep,\n  LvScale,\n  useLvLabelAction,\n} from './level-step';\nexport { useLevelStepWrap } from './level-step/LevelStepWrap';\nexport * from './level-step/LvScale';\n","import React from 'react';\n\nimport { ILevelStep, INode, LevelStep } from './index';\nimport { ILvLabelAction, ILvScale, LvScale, useLvLabelAction } from './LvScale';\nimport { getLvIdxByCurScore } from './utils';\n\nimport s from './LevelStep.m.scss';\n\nexport interface ILevelStepWrap extends ILevelStep, ILvLabelAction, ILvScale {\n  levelStepStyle?: React.CSSProperties; // default { margin: '7px 0 7px 0' }\n  curLvScaleStyle?: React.CSSProperties; // default { fontWeight: 600 };\n  scale?: boolean; // default false\n}\n\n/**\n * @param 必填参数\n * @param prop steps: INode[];\n * @param prop current: INode;\n * @param prop baseColor?: string;\n * @param prop fillColor?: string;\n * @param prop\n * @param prop baseStyle?: React.CSSProperties;\n * @param prop fillStyle?: React.CSSProperties;\n * @param\n * @param props levelStepStyle?: React.CSSProperties; // default { margin: '7px 0 7px 0' }\n * @param props curLvScaleStyle?: React.CSSProperties; // default { fontWeight: 600 };\n * @param props scale?: boolean; // default false\n * @param props lvBtnProps?: boolean | IlvBtnProps; // default false\n *\n * @returns\n */\nexport function useLevelStepWrap(props: ILevelStepWrap) {\n  const {\n    steps,\n    current,\n    onActive,\n    levelStepStyle,\n    curLvScaleStyle,\n    scale = true,\n    lvBtnProps = false,\n    currentLv,\n  } = props;\n  const _levelStepStyle = {\n    margin: '7px 0 7px 0',\n    ...levelStepStyle,\n  };\n  const _curLvScaleStyle = curLvScaleStyle ?? { fontWeight: 600 };\n  const { value } = current;\n  const curLvIdx = getLvIdxByCurScore(\n    value,\n    steps.map((lv: INode) => Number(lv.value))\n  );\n  const { lvLabelNode, onReset } = useLvLabelAction({\n    steps,\n    current,\n    onActive,\n    lvBtnProps,\n    currentLv: currentLv ?? curLvIdx,\n  });\n  const levelStepNode = (\n    <div className={s.wrap}>\n      {scale ? (\n        <LvScale steps={steps} currentLv={currentLv ?? curLvIdx} current={current} inCurStyle={_curLvScaleStyle} />\n      ) : null}\n      <div style={_levelStepStyle}>\n        <LevelStep steps={steps} current={current} />\n      </div>\n      {lvBtnProps ? lvLabelNode : null}\n    </div>\n  );\n  return {\n    levelStepNode,\n    onLabelActionReset: onReset,\n  };\n}\n","import React, { CSSProperties, FC, useState } from 'react';\n\nimport cx from 'classnames';\nimport { isNil } from 'lodash';\n\nimport { getLvIdxByCurScore } from './utils';\nimport { INode } from '.';\n\nimport s from './LevelStep.m.scss';\n\nconst arrow =\n  'https://p3-infra.elabpic.com/tos-cn-i-ax5x5hote5/4b3373af401248ef905bcee4057623b9~tplv-ax5x5hote5-image.image';\n\nexport type TOnActive = (actNode: INode, idx: number) => void;\nexport interface ILvBase {\n  steps: INode[];\n  current: INode;\n  currentLv?: number;\n  style?: React.CSSProperties;\n  onActive?: TOnActive;\n}\n\nexport interface IlvBtnProps {\n  ActiveArrow?: React.ReactChild | boolean;\n}\nexport type TLvBtnProps = false | IlvBtnProps;\nexport interface ILvLabelAction extends ILvBase {\n  fillColor?: string;\n  lvBtnProps?: TLvBtnProps; // default false\n  classnames?: {\n    nodeWrap?: string;\n    nodeTag?: string;\n    text?: string;\n  };\n}\n\n/**\n *\n * @param props fillColor?: string;\n * @param props lvBtnProps?: false | IlvBtnProps;\n * @param props fillColor?: string;\n * @param props classnames?: {\n    nodeWrap?: string;\n    nodeTag?: string;\n    text?: string;\n  };\n * @returns\n */\nexport function useLvLabelAction(props: ILvLabelAction) {\n  const [active, setActive] = useState(props?.currentLv);\n  const { steps, current, currentLv, style = {}, onActive, classnames = {}, fillColor, lvBtnProps } = props;\n  const { ActiveArrow } = (lvBtnProps ?? {}) as IlvBtnProps;\n  const curLvIdx = getLvIdxByCurScore(\n    current.value,\n    steps.map((lv: INode) => Number(lv.value))\n  );\n  const _currentLv = currentLv ?? curLvIdx;\n\n  React.useEffect(() => {\n    setActive(_currentLv);\n  }, [_currentLv]);\n\n  const onReset = () => {\n    setActive(currentLv);\n  };\n\n  const _renderArrowNode = (_isAct: boolean) => (\n    <div className={s.activeSlide}>{_isAct ? <img src={arrow} alt={'arrow'}/> : null}</div>\n  );\n  const lvLabelNode = (\n    <section className={s.label} style={style}>\n      {steps.map((lv: INode, idx: number) => {\n        const isActive = idx === active;\n        const curTag = cx(s.nodeTagCur);\n        const _textWrap = cx(s.text, classnames?.text, isActive ? curTag : '');\n        const _nodeWrap = cx(s.nodeWrap, classnames?.nodeWrap);\n        return (\n          <div\n            className={_nodeWrap}\n            key={String(lv.tag)}\n            onClick={() => {\n              setActive(idx);\n              onActive?.(steps?.[idx], idx);\n            }}>\n            <div className={cx(s.argue, s.nodeTag, classnames?.nodeTag)}>\n              <div style={isActive ? { color: fillColor } : {}} className={_textWrap}>\n                <div className={s.argue}>{lv.tag}</div>\n              </div>\n            </div>\n            {Boolean(lvBtnProps && isActive) ? (\n              <div>\n                {ActiveArrow === false ? null : (\n                  <>{ActiveArrow === true ? _renderArrowNode(isActive) : <>{ActiveArrow}</>}</>\n                )}\n              </div>\n            ) : null}\n          </div>\n        );\n      })}\n    </section>\n  );\n  return {\n    lvLabelNode,\n    onReset,\n  };\n}\nexport interface ILvScale extends ILvBase {\n  inCurStyle?: CSSProperties;\n  inLbStyle?: CSSProperties;\n}\n/**\n * this is a btn action component\n * @param inCurStyle?: CSSProperties;\n * @param inLbStyle?: CSSProperties;\n * @returns\n */\nexport const LvScale: FC<ILvScale> = (props: ILvScale) => {\n  const { steps, currentLv, current, inCurStyle, inLbStyle, style, ...resProps } = props;\n  const curLvIdx = getLvIdxByCurScore(\n    current.value,\n    steps.map((lv: INode) => Number(lv.value))\n  );\n  const _currentLv = currentLv ?? curLvIdx;\n  const [_inCurStyle, _inLbStyle, _style] = [inCurStyle ?? {}, inLbStyle ?? {}, style ?? {}];\n  return (\n    <>\n      <section className={s.value} style={_style}>\n        {steps?.map((lv: INode, idx: number) => {\n          const _key = String(lv.label);\n          if (idx === _currentLv) {\n            return (\n              <div className={s.argue} key={_key} {...resProps}>\n                <span className={s.lbTxtCur} style={_inCurStyle}>\n                  {!isNil(current?.label) ? current?.label : lv.label}\n                </span>\n              </div>\n            );\n          } else {\n            return (\n              <div className={s.argue} key={_key} {...resProps}>\n                <span className={s.lbTxt} style={_inLbStyle}>\n                  {lv.label}\n                </span>\n              </div>\n            );\n          }\n        })}\n      </section>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport useDebounceFn from 'ahooks/es/useDebounceFn';\nimport cx from 'classnames';\n\nimport { ILevelStepWrap, useLevelStepWrap } from './LevelStepWrap';\nimport { ILvLabelAction, LvScale, useLvLabelAction } from './LvScale';\nimport { _nodePar, getLvIdxByCurScore } from './utils';\n\nimport s from './levelNode.m.scss';\n\nexport interface INode {\n  value: number;\n  label: React.ReactChild | undefined;\n  tag?: React.ReactChild;\n  level?: number;\n}\ninterface INodePar {\n  /**\n   * 节点直径大小 default 12\n   */\n  node2Radius: number;\n  /**\n   * 当前节点直径大小 default 22\n   */\n  curNode2Radius: number;\n}\n\nexport interface ILevelStep {\n  steps: INode[];\n  current: INode;\n  baseColor?: string;\n  fillColor?: string;\n}\nconst progressWrapId = 'ecom_byted_LevelStep_progressWrap';\n/**\n * @param current current level\n * @param steps level config array\n * @returns\n */\nfunction LevelStep(props: ILevelStep) {\n  const [fill, setFill] = React.useState({\n    fillPer: 0,\n    lvWillFilledWid: 0,\n  });\n  const { steps = [], current = {} as INode, baseColor = '#fff', fillColor = '#7570fb' } = props;\n  const nodePar: INodePar = _nodePar;\n  const { node2Radius, curNode2Radius } = nodePar;\n  const { value } = current;\n  const progressWrapRef = React.useRef(null as unknown as HTMLDivElement);\n  const levelNum = steps.length - 1;\n  const curLvIdx = getLvIdxByCurScore(\n    value,\n    steps.map((lv: INode) => Number(lv.value))\n  );\n  const calcFillPer = React.useCallback(() => {\n    if (levelNum === curLvIdx) {\n      setFill({\n        fillPer: 1,\n        lvWillFilledWid: 0,\n      });\n    } else if (0 < curLvIdx || curLvIdx < levelNum) {\n      const progressWrapEle = document.getElementById(progressWrapId) ?? ({} as HTMLElement);\n      const lvRangleLen = Number(progressWrapEle?.clientWidth ?? 0);\n      const lvTotalSum = lvRangleLen - levelNum * node2Radius - curNode2Radius;\n      const nextLvRange = steps[curLvIdx + 1].value - steps[curLvIdx].value;\n      const lvFilledPer = ((curLvIdx / levelNum) * lvTotalSum) / lvRangleLen;\n      const _lvWillFilledWid = ((value - steps[curLvIdx].value) / nextLvRange / levelNum) * lvTotalSum;\n\n      const fillDotPer = (curNode2Radius + curLvIdx * node2Radius) / lvRangleLen;\n      const _fillPer = lvFilledPer + fillDotPer;\n      /**\n       * 填充率保证在 [0, 1] 后期可做扩展\n       * 假如_fillPer === 0.5； 后期可以使其从0渐变到0.5；产生动画效果\n       * */\n      const __fillPer = _fillPer <= 0 ? 0 : _fillPer >= 1 ? 1 : _fillPer;\n      const _fill = {\n        fillPer: __fillPer,\n        lvWillFilledWid: _lvWillFilledWid,\n      };\n      setFill(_fill);\n    }\n  }, [steps, curLvIdx, curNode2Radius, levelNum, node2Radius, value]);\n\n  useEffect(() => {\n    calcFillPer();\n  }, [calcFillPer]);\n\n  /**\n   * when window is resized, there will be recomputed again delay 500ms.\n   */\n  const { run } = useDebounceFn(calcFillPer, 500);\n  useEffect(() => {\n    window.addEventListener('resize', run);\n    return () => {\n      window.removeEventListener('resize', run);\n    };\n  }, []);\n\n  function getLvNodeOffset() {\n    return {\n      leftOffset: 0 === curLvIdx ? curNode2Radius : node2Radius,\n      rightOffset: levelNum === curLvIdx ? curNode2Radius : node2Radius,\n    };\n  }\n\n  const { leftOffset, rightOffset } = getLvNodeOffset();\n\n  return (\n    <div className={s.progress}>\n      <div\n        className={s.progressWrap}\n        style={{\n          margin: `0 calc(${(1 / steps.length / 2) * 100}% - ${rightOffset / 2}px) 0 calc(${\n            (1 / steps.length / 2) * 100\n          }% - ${leftOffset / 2}px)`,\n        }}\n        id={progressWrapId}\n        ref={progressWrapRef}>\n        <div\n          className={cx(s.line, s.baseLine)}\n          style={{\n            width: `calc(100% - ${node2Radius * 2}px)`,\n            margin: `0 ${rightOffset}px 0 ${leftOffset}px`,\n            borderColor: baseColor,\n          }}\n        />\n        <div\n          className={cx(s.line, s.fillLine)}\n          style={{ width: `calc(${fill.fillPer * 100}% + ${fill.lvWillFilledWid}px)`, borderColor: fillColor }}\n        />\n        <div className={cx(s.bottomBox)} />\n        <section className={s.floatLvNode}>\n          <div className={s.levelDot}>\n            {steps.map((_lv: INode, key: number) => {\n              if (curLvIdx > key) {\n                return <section key={key} className={cx(s.levelNode, s.fill)} style={{ backgroundColor: fillColor }} />;\n              } else if (curLvIdx === key) {\n                return (\n                  <div key={key}>\n                    <section\n                      className={cx(s.levelCurNode)}\n                      style={{\n                        backgroundColor: baseColor,\n                        borderColor: fillColor,\n                      }}\n                    />\n                  </div>\n                );\n              } else {\n                return (\n                  <section key={key} className={cx(s.levelNode, s.unFill)} style={{ backgroundColor: baseColor }} />\n                );\n              }\n            })}\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport { LevelStep, LvScale, useLevelStepWrap, useLvLabelAction };\n\nexport { _nodePar, getLvIdxByCurScore, ILevelStepWrap, ILvLabelAction };\n","/**\n * scoreRange 从小到大的排列数组\n * score 当前数字\n */\nexport function getLvIdxByCurScore(score: number, scoreRange: number[]): number {\n  const len = scoreRange.length;\n  if (len === 0 || len === 1) {\n    return 0;\n  }\n  if (scoreRange[0] >= score) {\n    return 0;\n  } else if (scoreRange[len - 1] <= score) {\n    return len - 1;\n  } else if (len >= 2 && scoreRange[len - 2] <= score && score < scoreRange[len - 1]) {\n    return len - 2;\n  }\n  const sIdx = scoreRange.findIndex((_: number, idx: number) => {\n    return scoreRange[idx] <= score && score < scoreRange[idx + 1];\n  });\n  return sIdx;\n}\n\nexport const _nodePar = {\n  node2Radius: 12,\n  curNode2Radius: 22,\n};\n","import { INode } from './level-step';\n\nexport const _configs = [\n  {\n    value: 0,\n    label: '0',\n    tag: 'V1 机构',\n  },\n  {\n    value: 390,\n    label: '390',\n    tag: 'V2 机构',\n  },\n  {\n    value: 490,\n    label: '490',\n    tag: 'V3 机构',\n  },\n  {\n    value: 590,\n    label: '590',\n    tag: 'V4 机构',\n  },\n  {\n    value: 690,\n    label: '690+',\n    tag: 'V5 机构',\n  },\n] as INode[];\n\nexport const _current = {\n  value: 400,\n  label: '当前等级',\n  tag: '当前水平',\n};\n\nexport const _curTabLv = {\n  value: 0,\n  label: '当前等级',\n  tag: '当前水平',\n};\n","import { LevelStepDemo } from '@global/materials/steps';\nimport { SubAppBorder } from '@global/styles/layout/sub-app-border';\nimport { Tabs } from 'antd';\nimport React from 'react';\n\nimport DatePickerSimple from '@global/materials/date-picker/demos/simple';\n\nconst materialList = [\n  <LevelStepDemo />,\n  // <DatePickerSimple />\n];\n\nconst compTotal = 30;\nfunction getCompByKey(idx: number) {\n  console.log('idx', idx)\n  if (idx < materialList.length) {\n    return materialList?.[idx];\n  }\n  return <>nothing</>;\n}\n\nexport default function MaterialList() {\n  return (\n    <SubAppBorder>\n      <h2>{'MaterialList'}</h2>\n      <Tabs\n        defaultActiveKey=\"0\"\n        tabPosition={'top'}\n        onTabClick={(activeKey: string, e: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>) => {\n          // console.log('activeKey', activeKey)\n        }}\n        items={new Array(compTotal).fill(0).map((_, i) => {\n          const id = String(i);\n          return {\n            label: `Tab-${id}`,\n            key: id,\n            // disabled: i === 28,\n            children: <>\n              {getCompByKey(compTotal - i)}\n            </>,\n          };\n        })}\n      />\n    </SubAppBorder>\n  )\n}\n"],"names":[],"sourceRoot":""}